" Customization Based on Current Directory {
  " This allows me to put a .vim.custom file in every directory to load commands
  " and options specific to that directory. If you're working on multiple
  " projects that have deep directory structures you might need something more
  " sophisticated (e.g. walk up the directory tree until a .vim.custom is
  " found), but the same basic idea will work.
  if filereadable(".vim.custom")
      so .vim.custom
  endif
" }

" General {
  " Changing Vim's idea of the terminal.
  if !has('gui_running')
    if match($TERM, "screen")!=-1
      set term=xterm-256color  " while running in GNU screen override TERM
    endif
  endif

  " I like to have a different background in GUI and terminal modes,
  " so I can use the following if-then.
  if has('gui_running')
      set background=light  " in GUI run with light background
  else
      set background=dark  "in Terminal use dark background
  endif

" }

" GUI Settings {
  set guifont=Inconsolata\ 12
" }

" Formatting {
  set autoindent  " copy indentation from previous line
  "set cindent  " do C program indenting
  "set smartindent=off  " has no effect if use cindent

  " By default indents text with 2 space characters.
  if !exists('g:q_indent_width')
    let g:q_indent_width=2
  endif

  let &tabstop=g:q_indent_width  " Use 2 space characters to display tab character
  let &softtabstop=g:q_indent_width  " Use 2 space characters instead of tab character.
  let &shiftwidth=g:q_indent_width  " indent with 2 spaces, represents >> shift
  set expandtab  " put spaces instead of tab character
  set autoindent

  set textwidth=80  " maximum text width
  set wrap  " should automatically wrap text longer than 80 characters

  highlight OverLength ctermbg=red ctermfg=white guibg=#592929  " mark long
  match OverLength /\%80v.*/                                    " columns
" }

" Bundles {
  " UnBundle unnecessary Vundle bundles (plugins)
  " Remember to run ':BundleClean!' after this to remove the existing directories

  " PHP
    UnBundle  'spf13/PIV'
  " Java
    UnBundle 'derekwyatt/vim-scala'
    UnBundle 'derekwyatt/vim-sbt'
  " Ruby
    UnBundle 'tpope/vim-rails'
  
  
  " Those plugins don't properly work for me with basic configuration.
  "
  " Source Control
    UnBundle 'tpope/vim-fugitive'
  " Check syntax
    UnBundle 'scrooloose/syntastic'
" }


" Customization {

  " Override default status line by disabling unnecessary fugitive part.
  if has('statusline')
      set laststatus=2

      " Broken down into easily includeable segments
      set statusline=%<%f\                     " Filename
      set statusline+=%w%h%m%r                 " Options
      "set statusline+=%{fugitive#statusline()} " Git Hotness
      set statusline+=\ [%{&ff}/%Y]            " Filetype
      set statusline+=\ [%{getcwd()}]          " Current dir
      set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
  endif

  " General {
    " Ignore autocommand events set for BufEnter
    " set eventignore+=BufEnter
    " Most prefer to automatically switch to the current file directory when
    " a new buffer is opened; to prevent this behavior, add the following to
    " your .vimrc.bundles.local file:
    "let g:spf13_no_autochdir = 1
  " }

  " Plugins {
    " NERDTree {
      let g:NERDTreeDirArrows=0  " Fix NERDTree problem with entering sub dirs
      "let g:NERDTreeChDirMode=0  " Prevent NERDTree from changing the CWD
    " }

    " ctrlp {
      "When starting up, CtrlP sets its local working directory according to
      "this variable: 0 - disable this feature
      "let g:ctrlp_working_path_mode=0

      nnoremap <silent> <Leader>ctrp :CtrlP<CR>
      nnoremap <silent> <Leader>ctrb :CtrlPBuffer<CR>
      nnoremap <silent> <Leader>ctrm :CtrlPMRU<CR>

      let g:ctrlp_user_command = {
          \ 'types': {
              \ 1: ['.git', 'cd %s && git ls-files && cd -'],
              \ 2: ['.hg', 'hg --cwd %s locate -I .'],
          \ },
          \ 'fallback': 'find %s -type f'
      \ }
    " }
  " }
" }

" Tags {
  " Checks if variable for ctags top directory is set 
  if !exists('g:q_ctags_top_dir')
    let g:q_ctags_top_dir = "."  " By default stores tags in current directory.
  endif
  let g:q_ctags_output_file = "" . g:q_ctags_top_dir . "/tags"

  set tags += "" . g:q_ctags_output_file
" }


" C/C++ Settings {
  " Detecting file type for C++ standard headers with vim.
  au BufRead * if search('\M-*- C++ -*-', 'n', 1) | setlocal ft=cpp | endif

  " On buffer save generate local tags file (non-recursive as it should be fast).
  au BufWritePost * if &ft =~ 'cpp' | silent !ctags --c++-kinds=+p --fields=+iaS --extra=+q .
" }"

" Keyboard mappings {
  " Ctags generation.
  "
  " Re-generate ctags
  " To get mapping characters, press Ctrl-V while in Insert mode, and then the required key.
  au FileType * execute "map <Leader>8 :echomsg 'No ctags mapping defined for ' . &filetype . ' filetype'<CR>"
  au FileType cpp execute "map <Leader>8 :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q -f " . g:q_ctags_output_file . " " . g:q_ctags_top_dir . "<CR>"

  nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>  " Press Space to turn
                                                       " off highlighting and
                                                       " clear any message
                                                       " already displayed.
  " }
